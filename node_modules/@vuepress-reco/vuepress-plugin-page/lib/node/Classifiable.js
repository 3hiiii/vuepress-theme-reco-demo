"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@vuepress/core");
const core_2 = require("@vuepress-reco/core");
class Classifiable {
    constructor(options, app) {
        this.classificationData = {};
        this.frontmatterKeys = [];
        this.options = options;
        this.app = app;
        this.publishPosts = [];
        this.init();
    }
    // 初始化
    init() {
        this.options.forEach((option) => {
            if (option.type === 'frontmatter') {
                const { frontmatterKey: key, pagination, layout, } = option;
                this.frontmatterKeys.push(key);
                this.classificationData[key] = {
                    pagination: pagination || 10,
                    extendedPages: [],
                    items: {},
                    layout,
                };
            }
        });
    }
    // 解析 key-value 对应的数量
    resolveKeyValue(app) {
        this.app = app;
        this.app.pages.forEach((page) => {
            var _a, _b;
            if (((_a = page === null || page === void 0 ? void 0 : page.frontmatter) === null || _a === void 0 ? void 0 : _a.home) === true ||
                ((_b = page === null || page === void 0 ? void 0 : page.frontmatter) === null || _b === void 0 ? void 0 : _b.publish) === false) {
                return;
            }
            this.publishPosts.push(page);
            const classificationKeys = Object.keys(page.frontmatter).filter((key) => {
                return this.frontmatterKeys.includes(key);
            });
            classificationKeys.forEach((key) => {
                const values = page.frontmatter[key];
                if (core_2.isEmptyPlainObject(this.classificationData[key].items)) {
                    this.classificationData[key].items = values.reduce((total, current) => {
                        total[current] = {
                            pages: [page],
                            length: 1,
                        };
                        return total;
                    }, {});
                }
                else {
                    values.forEach((value) => {
                        if (!this.classificationData[key].items[value]) {
                            this.classificationData[key].items[value] = {
                                pages: [page],
                                length: 1,
                            };
                        }
                        else {
                            const { pages: p, length } = this.classificationData[key].items[value];
                            this.classificationData[key].items[value] = {
                                length: length + 1,
                                pages: [...p, page],
                            };
                        }
                    });
                }
            });
        });
        this.resolvePages();
    }
    // 根据数量转化成 page 信息
    resolvePages() {
        this.frontmatterKeys.forEach((key) => {
            const { items, layout, pagination } = this.classificationData[key];
            const valuesOfKey = Object.keys(items);
            this.classificationData[key].extendedPages = valuesOfKey.reduce((total, value) => {
                const num = items[value].length;
                const pageSize = Math.ceil(num / pagination);
                const pages = Array.from({ length: pageSize }).map((item, index) => {
                    return core_1.createPage(this.app, {
                        path: `/${key}/${value}/${index + 1}/`,
                        frontmatter: { layout },
                    });
                });
                return [...total, ...pages];
            }, []);
        });
    }
    // 解析 page 配置
    resolvePageOptions(option) {
        if (option.type === 'frontmatter') {
            return this.classificationData[option.frontmatterKey].extendedPages;
        }
        else {
            const { path, layout } = option;
            return [
                core_1.createPage(this.app, {
                    frontmatter: { layout },
                    path,
                }),
            ];
        }
    }
    getPublishPostsPage() {
        const pageSize = Math.ceil(this.publishPosts.length / 10);
        const pages = Array.from({ length: pageSize }).map((item, index) => {
            return core_1.createPage(this.app, {
                path: `/posts/${index + 1}/`,
                frontmatter: { layout: 'Post' },
            });
        });
        return pages;
    }
    // 拓展的页面
    get extendedPages() {
        const pages = this.options.reduce((total, option) => {
            const classificationPages = this.resolvePageOptions(option);
            return [...total, ...classificationPages];
        }, []);
        const publishPostsPages = this.getPublishPostsPage();
        return [...pages, ...publishPostsPages];
    }
    get classificationPaginationPosts() {
        let data = {};
        this.frontmatterKeys.forEach((key) => {
            const { items, pagination } = this.classificationData[key];
            const valuesOfKey = Object.keys(items);
            valuesOfKey.forEach((value) => {
                const { length, pages } = items[value];
                const pageSize = Math.ceil(length / pagination);
                const paginationDataOfValue = Array.from({
                    length: pageSize,
                }).reduce((total, current, index) => {
                    const currentPage = index + 1;
                    total[`/${key}/${value}/${currentPage}/`] = {
                        pageSize: pagination,
                        total: pages.length,
                        currentPage,
                        currentClassificationKey: key,
                        currentClassificationValue: value,
                        pages: index < pageSize - 1
                            ? pages.slice(pagination * (pageSize - 1), pagination)
                            : pages.slice(pagination * (pageSize - 1)),
                    };
                    return total;
                }, {});
                data = { ...data, ...paginationDataOfValue };
            });
        });
        return data;
    }
    get classificationSummary() {
        return this.classificationData;
    }
}
exports.default = Classifiable;
